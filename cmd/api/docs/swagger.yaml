definitions:
  entity.AdminLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.Category:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - description
    - name
    type: object
  entity.Coupon:
    properties:
      amount:
        type: integer
      code:
        maxLength: 8
        type: string
      id:
        type: integer
      type:
        type: string
      usage_limit:
        type: integer
      usedcount:
        type: integer
      valid_until:
        type: string
    required:
    - amount
    - code
    - type
    - usage_limit
    type: object
  entity.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  entity.Inventory:
    properties:
      productCategory:
        type: integer
      productId:
        type: integer
      quantity:
        type: integer
    required:
    - quantity
    type: object
  entity.ListUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
      referalcode:
        type: string
      wallet:
        type: integer
    required:
    - email
    - name
    - password
    - phone
    type: object
  entity.UserAddress:
    properties:
      address:
        type: string
      country:
        type: string
      id:
        type: integer
      pin:
        type: string
      state:
        type: string
      type:
        type: string
    required:
    - address
    - country
    - pin
    - state
    - type
    type: object
  models.EditUser:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  models.ProductWithQuantityResponse:
    properties:
      category:
        type: integer
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      offerprice:
        type: integer
      price:
        type: integer
      quantity:
        type: integer
      size:
        type: string
    type: object
  models.Signup:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
      referalcode:
        type: string
    required:
    - email
    - name
    - password
    - phone
    type: object
info:
  contact: {}
  description: API for ecommerce website
  title: lapify eCommerce API
  version: "1.0"
paths:
  /admin/categories:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            $ref: '#/definitions/entity.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Get all categories
      tags:
      - Admin Category Management
    post:
      consumes:
      - application/json
      description: Create a new category by providing the category details.
      operationId: create-category
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "200":
          description: 'success": "Category added successfully" entity.Category'
          schema:
            type: string
        "400":
          description: 'error": "Invalid input" entity.ErrorResponse'
          schema:
            type: string
      summary: Create a new category
      tags:
      - Admin Category Management
  /admin/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing category based on the provided ID
      operationId: deleteCategory
      parameters:
      - description: Category ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'success": "Category deleted successfully'
          schema:
            type: string
        "400":
          description: 'error": "Failed to delete category'
          schema:
            type: string
      summary: Delete a category
      tags:
      - Admin Category Management
    put:
      consumes:
      - application/json
      description: Edit a category based on the provided JSON data
      operationId: editCategory
      parameters:
      - description: Category ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: Category object to be edited
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "200":
          description: 'success": "product edited successfully", "edited category":
            entity.Category'
          schema:
            type: string
        "400":
          description: 'error": "editing category failed'
          schema:
            type: string
      summary: Edit a category
      tags:
      - Admin Category Management
  /admin/category/offer:
    post:
      consumes:
      - multipart/form-data
      description: Add an offer to a category based on the provided category ID and
        offer
      operationId: addCategoryOffer
      parameters:
      - description: form
        in: formData
        name: categoryid
        required: true
        type: string
      - description: form
        in: formData
        name: offer
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'offer added: Category offer added successfully'
          schema:
            type: string
        "400":
          description: 'error: Failed to add category offer'
          schema:
            type: string
      summary: Add an offer to a category
      tags:
      - Admin Offer Management
  /admin/coupons:
    delete:
      consumes:
      - application/json
      description: Delete an existing coupon based on the provided code
      operationId: deleteCoupon
      parameters:
      - description: Coupon code to be deleted
        in: formData
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Coupon successfully deleted
          schema:
            type: string
        "400":
          description: Failed to delete coupon
          schema:
            type: string
      summary: Delete a coupon
      tags:
      - Admin Coupon Management
    get:
      description: Get a list of all available coupons
      operationId: allCoupons
      produces:
      - application/json
      responses:
        "200":
          description: List of available coupons" entity.coupon
          schema:
            type: string
        "400":
          description: Failed to retrieve available coupons
          schema:
            type: string
      summary: Get all available coupons
      tags:
      - Admin Coupon Management
    post:
      consumes:
      - application/json
      description: Add a new coupon with the provided JSON data
      operationId: addCoupon
      parameters:
      - description: Coupon details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Coupon'
      produces:
      - application/json
      responses:
        "200":
          description: 'Coupon added successfully" "coupon": entity.coupon'
          schema:
            type: string
        "400":
          description: Failed to add coupon
          schema:
            type: string
      summary: Add a new coupon
      tags:
      - Admin Coupon Management
  /admin/home:
    get:
      description: Get information about available options and the admin dashboard
      operationId: home
      produces:
      - application/json
      responses:
        "200":
          description: 'Options: SalesReport - User Management - Product Management
            - Order Management. Dashboard information is also included." "Dashboard":
            entity.AdminDashboard'
          schema:
            type: string
        "400":
          description: Failed to retrieve dashboard information
          schema:
            type: string
      summary: Get home information
      tags:
      - Admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticate admin using email and password and generate an authentication
        token.
      operationId: admin-login
      parameters:
      - description: Admin Data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/entity.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: 'message": "Admin logged in successfully'
          schema:
            type: string
        "400":
          description: 'error": "Empty request body'
          schema:
            type: string
      summary: Admin Login with Password
      tags:
      - Admin
  /admin/logout:
    post:
      description: Deletes the authentication token cookie to log the admin out
      produces:
      - application/json
      responses:
        "200":
          description: Admin logged out successfully
          schema:
            type: string
        "400":
          description: cookie delete failed
          schema:
            type: string
      summary: Logs out the Admin
      tags:
      - Admin
  /admin/order/cancel/{orderid}:
    patch:
      description: Cancels an order based on the provided order ID (for admin use).
      operationId: admin-cancel-order
      parameters:
      - description: Order ID to be canceled
        in: path
        name: orderid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Cancel order (Admin)
      tags:
      - Admin Orders
  /admin/order/details:
    get:
      description: Retrieves the order details for admin based on pagination parameters.
      operationId: get-admin-order-details
      parameters:
      - description: Page number for pagination (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 5)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order details retrieved successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Retrieve order details for admin
      tags:
      - Admin Orders
  /admin/order/update/{orderid}:
    patch:
      description: Updates the status of an order based on the provided order ID and
        status (for admin use).
      operationId: admin-update-order
      parameters:
      - description: Order ID to be updated
        in: path
        name: orderid
        required: true
        type: integer
      - description: New status for the order
        in: formData
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Order updated successfully. Updated order status: {updated
            order status}'
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Update order status (Admin)
      tags:
      - Admin Orders
  /admin/product/offer:
    post:
      consumes:
      - multipart/form-data
      description: Add an offer to a product based on the provided product ID and
        offer
      operationId: addProductOffer
      parameters:
      - description: Product ID to add the offer to
        in: formData
        name: productid
        required: true
        type: string
      - description: Offer to be added to the product
        in: formData
        name: offer
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product offer added successfully
          schema:
            type: string
        "400":
          description: Failed to add product offer
          schema:
            type: string
      summary: Add an offer to a product
      tags:
      - Admin Offer Management
  /admin/products:
    get:
      description: Retrieve a list of products for the admin dashboard.
      operationId: get-admin-products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductWithQuantityResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get a list of products for admin
      tags:
      - Admin Product Management
    post:
      consumes:
      - multipart/form-data
      description: Create a new product with details, including image upload
      operationId: createProduct
      parameters:
      - description: Product Name
        in: formData
        name: name
        required: true
        type: string
      - description: Product Price
        in: formData
        name: price
        required: true
        type: number
      - description: Product Size
        in: formData
        name: size
        required: true
        type: string
      - description: Category ID
        in: formData
        name: category
        required: true
        type: integer
      - description: Product Description
        in: formData
        name: description
        required: true
        type: string
      - description: Product Specification
        in: formData
        name: specification
        required: true
        type: string
      - description: Product Image
        in: formData
        name: image
        required: true
        type: file
      - description: Product Image URL
        in: formData
        name: imageURL
        type: string
      - description: Product Quantity
        in: formData
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product added successfully" "products":entity.products
          schema:
            type: string
        "400":
          description: Failed to get product by ID
          schema:
            type: string
      summary: Create a new product
      tags:
      - Admin Product Management
  /admin/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing product based on the provided ID
      parameters:
      - description: Product ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            type: string
        "400":
          description: Product not found
          schema:
            type: string
      summary: Delete a product
      tags:
      - Admin Product Management
      - Admin Product Management
    put:
      consumes:
      - application/json
      description: Edit an existing product based on the provided JSON data
      operationId: editProduct
      parameters:
      - description: Product ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: JSON-encoded Product object to be edited
        in: body
        name: product
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product edit success" "product":entity.product
          schema:
            type: string
        "400":
          description: Product edit failed
          schema:
            type: string
      summary: Edit a product
      tags:
      - Admin Product Management
  /admin/products/stocks/{id}:
    put:
      consumes:
      - application/json
      description: Add stock to a product based on the provided ID and quantity
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Stock details to be added
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Inventory'
      produces:
      - application/json
      responses:
        "200":
          description: Updated inventory
          schema:
            $ref: '#/definitions/entity.Inventory'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Add stock to a product
      tags:
      - Admin Product Management
  /admin/salesreport/date/{start}/{end}:
    get:
      description: Generates a sales report based on the provided start and end dates.
      operationId: sales-report-by-date
      parameters:
      - description: 'Start date for the report (format: 2-1-2006)'
        in: path
        name: start
        required: true
        type: string
      - description: 'End date for the report (format: 2-1-2006)'
        in: path
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report generated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Generate sales report by date range
      tags:
      - Admin Report
  /admin/salesreport/payment/{start}/{end}/{paymentmethod}:
    get:
      description: Generates a sales report based on the provided start and end dates
        and payment method.
      operationId: sales-report-by-payment
      parameters:
      - description: 'Start date for the report (format: 2-1-2006)'
        in: path
        name: start
        required: true
        type: string
      - description: 'End date for the report (format: 2-1-2006)'
        in: path
        name: end
        required: true
        type: string
      - description: Payment method for the report
        in: path
        name: paymentmethod
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report generated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Generate sales report by payment method and date range
      tags:
      - Admin Report
  /admin/salesreport/period/{period}:
    get:
      description: Generates a sales report based on the provided period.
      operationId: sales-report-by-period
      parameters:
      - description: Period for the report (e.g., 'monthly', 'quarterly', 'yearly')
        in: path
        name: period
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report generated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Generate sales report by period
      tags:
      - Admin Report
  /admin/search/users:
    get:
      description: Retrieve a list of users based on search criteria, paginated with
        optional limit
      operationId: searchUsers
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: string
      - description: 'Limit the number of users per page (default: 5)'
        in: query
        name: limit
        type: string
      - description: Search criteria to filter users
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'userlist: []entity.User'
          schema:
            type: string
        "400":
          description: 'error: Failed to retrieve userlist'
          schema:
            type: string
      summary: Search users based on criteria
      tags:
      - Admin User Management
  /admin/stockless/products:
    get:
      description: Retrieve a list of products with zero stock
      operationId: stocklessProducts
      produces:
      - application/json
      responses:
        "200":
          description: 'List of stockless products: []entity.Product'
          schema:
            type: string
        "400":
          description: 'error: Failed to retrieve stockless products'
          schema:
            type: string
      summary: Get a list of stockless products
      tags:
      - Admin Product Management
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users.
      operationId: list-users
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of users per page (default is 5)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: List Users
      tags:
      - Admin User Management
  /admin/users/toggle-permission/{id}:
    put:
      consumes:
      - application/json
      description: Toggle the permission of a user by providing the user's ID.
      operationId: toggle-user-permission
      parameters:
      - description: User ID
        format: int32
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'success: User permission toggled successfully'
          schema:
            type: string
        "400":
          description: 'error: Invalid user ID'
          schema:
            type: string
        "401":
          description: 'error: User not found'
          schema:
            type: string
      summary: Toggle User Permission
      tags:
      - Admin User Management
  /logout:
    post:
      description: Deletes the authentication token cookie to log the user out
      produces:
      - application/json
      responses:
        "200":
          description: user logged out successfully
          schema:
            type: string
        "400":
          description: cookie delete failed
          schema:
            type: string
      summary: Logs out the user
      tags:
      - User
  /order/payment/verify:
    post:
      consumes:
      - multipart/form-data
      description: Verifies the payment for Razorpay based on the provided signature,
        Razorpay ID, and payment ID.
      operationId: verify-payment-razorpay
      parameters:
      - description: Signature for payment verification
        in: formData
        name: sign
        required: true
        type: string
      - description: Razorpay ID
        in: formData
        name: razorid
        required: true
        type: string
      - description: Payment ID
        in: formData
        name: paymentid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Payment successful. Invoice details: {invoice}'
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Verify payment for Razorpay
      tags:
      - User Orders
  /user/address:
    post:
      description: Adds a new address associated with the authenticated user
      parameters:
      - description: Address information to be added
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/entity.UserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: address added successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Adds a new address for the user
      tags:
      - User Address
  /user/address/{type}:
    delete:
      description: Deletes a specific type of address for the authenticated user.
      operationId: delete-user-address
      parameters:
      - description: Type of address to be deleted (e.g., 'home', 'work')
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'success": "address Deleted successfully" "Successful response'
          schema:
            type: string
        "400":
          description: 'error": "Error message" "Error response'
          schema:
            type: string
      summary: Delete user address
      tags:
      - User Address
    patch:
      description: Edit the user's address of a specific type (e.g., home, work)
      parameters:
      - description: Address type (e.g., home, work)
        in: path
        name: type
        required: true
        type: string
      - description: Updated address information
        in: body
        name: useraddress
        required: true
        schema:
          $ref: '#/definitions/entity.UserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: 'success: address edited successfully'
          schema:
            type: string
        "400":
          description: 'error: Bad Request'
          schema:
            type: string
      summary: Edit the user's address
      tags:
      - User Address
  /user/cart:
    get:
      description: Retrieve the user's cart based on the provided user ID
      operationId: getCart
      produces:
      - application/json
      responses:
        "200":
          description: 'usercart: entity.Cart'
          schema:
            type: string
        "400":
          description: 'error: Failed to retrieve user''s cart'
          schema:
            type: string
      summary: Get the user's cart
      tags:
      - User Products
    post:
      consumes:
      - multipart/form-data
      description: Add a product to the user's cart based on the provided product
        ID and quantity
      operationId: addToCart
      parameters:
      - description: Product ID to add to the cart
        in: formData
        name: productid
        required: true
        type: string
      - description: Quantity of the product to add to the cart
        in: formData
        name: quantity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Product added to cart successfully, addedproduct:
            []entity.CartItem'
          schema:
            type: string
        "400":
          description: 'error: Failed to add product to cart'
          schema:
            type: string
        "500":
          description: 'error: Failed to retrieve cart items'
          schema:
            type: string
      summary: Add a product to the user's cart
      tags:
      - User Products
  /user/cart/{id}:
    delete:
      description: Remove a product from the user's cart based on the provided cart
        item ID
      operationId: removeFromCart
      parameters:
      - description: Cart item ID to remove from the cart
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Product removed from cart'
          schema:
            type: string
        "400":
          description: 'error: Failed to remove product from cart'
          schema:
            type: string
      summary: Remove a product from the user's cart
      tags:
      - User Products
  /user/cart/coupon:
    post:
      consumes:
      - multipart/form-data
      description: Applies a coupon to the authenticated user's cart based on the
        provided coupon code.
      operationId: apply-coupon
      parameters:
      - description: Coupon code to be applied
        in: formData
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Total offer prize and Coupon applied successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Apply coupon to user's cart
      tags:
      - User Coupon
  /user/cartlist:
    get:
      description: Retrieve the items in the user's cart based on the provided user
        ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'cartlist: []entity.CartItem'
          schema:
            type: string
        "400":
          description: 'error: Bad Request'
          schema:
            type: string
      summary: Get the items in the user's cart
      tags:
      - User Products
  /user/change-password:
    post:
      consumes:
      - application/json
      description: Initiates the process of changing the user password by sending
        an OTP.
      operationId: change-password
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully for password change
          schema:
            type: string
        "400":
          description: 'Bad request: Unable to initiate password change'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Request OTP for changing user password
      tags:
      - User
  /user/change-password/validation:
    post:
      consumes:
      - multipart/form-data
      description: Validates the provided OTP and changes the user password.
      operationId: otp-validation-password
      parameters:
      - description: New password for the user
        in: formData
        name: password
        required: true
        type: string
      - description: OTP for validation
        in: formData
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: 'Bad request: Unable to change password'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Validate OTP and change user password
      tags:
      - User
  /user/coupons:
    get:
      description: Retrieves a list of available coupons.
      operationId: get-available-coupons
      produces:
      - application/json
      responses:
        "200":
          description: List of available coupons
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Retrieve available coupons
      tags:
      - User Coupon
  /user/details:
    get:
      description: Retrieve user details and associated address based on the provided
        user ID
      produces:
      - application/json
      responses:
        "200":
          description: 'userdetails: entity.UserDetails, address: entity.UserAddress'
          schema:
            type: string
        "400":
          description: 'error: Bad Request'
          schema:
            type: string
      summary: Retrieve details for the authenticated user
      tags:
      - User
  /user/login:
    post:
      consumes:
      - multipart/form-data
      description: Authenticate a user using phone and password, and generate an authentication
        token
      operationId: loginWithPassword
      parameters:
      - description: Phone number of the user
        in: formData
        name: phone
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User logged in successfully and cookie stored'
          schema:
            type: string
        "400":
          description: 'error: Invalid phone number or password'
          schema:
            type: string
      summary: Log in a user using phone and password
      tags:
      - User
  /user/order/cancel/{orderid}:
    patch:
      description: Cancels an order based on the provided order ID.
      operationId: cancel-order
      parameters:
      - description: Order ID to be canceled
        in: path
        name: orderid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order canceled successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Cancel an order
      tags:
      - User Orders
  /user/order/history:
    get:
      description: Retrieves the order history for the authenticated user based on
        pagination parameters.
      operationId: get-order-history
      parameters:
      - description: Page number for pagination (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 5)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order history retrieved successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Retrieve order history for the authenticated user
      tags:
      - User Orders
  /user/order/invoice:
    get:
      description: Generates and downloads the invoice for a specific order.
      operationId: print-invoice
      parameters:
      - description: Order ID for which the invoice should be generated
        in: query
        name: orderid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Invoice generated and downloaded successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Print invoice for an order
      tags:
      - User Orders
  /user/order/place/{addressid}/{payment}:
    post:
      consumes:
      - application/json
      description: Places an order for the authenticated user based on the selected
        payment method.
      operationId: place-order
      parameters:
      - description: Address ID for the order
        in: path
        name: addressid
        required: true
        type: integer
      - description: Payment method ('cod', 'razorpay', 'wallet')
        in: path
        name: payment
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invoice details" "Successful response for Wallet payment
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Place an order
      tags:
      - User Orders
  /user/orderstatus/{orderid}:
    get:
      description: Retrieves the status of an order based on the provided order ID.
      operationId: get-order-status
      parameters:
      - description: Order ID for which the status should be retrieved
        in: path
        name: orderid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order status retrieved successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get the status of an order
      tags:
      - User Orders
  /user/products:
    get:
      description: Retrieve a list of products with pagination
      operationId: getProducts
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: string
      - description: 'Limit the number of products per page (default: 10)'
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'userId: <userID>, products: []entity.Product'
          schema:
            type: string
        "400":
          description: 'error: Product not found'
          schema:
            type: string
      summary: Get a list of products
      tags:
      - User Products
  /user/products/details/{productid}:
    get:
      description: Retrieve details of a product based on the provided product ID
      operationId: getProductDetails
      parameters:
      - description: Product ID to get details for
        in: path
        name: productid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'products: entity.Product, product details: entity.ProductDetails'
          schema:
            type: string
        "400":
          description: 'error: Product not found'
          schema:
            type: string
      summary: Get details of a specific product
      tags:
      - User Products
  /user/products/filter:
    get:
      description: Retrieves a list of products based on the provided filter criteria.
      operationId: sort-products-by-filter
      parameters:
      - description: Minimum prize for product filtering
        in: query
        name: minprize
        type: integer
      - description: Maximum prize for product filtering
        in: query
        name: maxprize
        type: integer
      - description: Category ID for product filtering
        in: query
        name: category
        type: integer
      - description: Product size for filtering
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product list retrieved successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Sort products by filter
      tags:
      - User Sort
  /user/products/search:
    get:
      description: Searches for products based on the provided search query.
      operationId: search-products
      parameters:
      - description: Page number for pagination (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 5)
        in: query
        name: limit
        type: integer
      - description: Search query string
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: 'error": "Error message" "Error response'
          schema:
            type: string
      summary: Search products
      tags:
      - User Sort
  /user/products/sort:
    get:
      description: Retrieves a list of products sorted by category based on the provided
        category ID.
      operationId: sort-products-by-category
      parameters:
      - description: Page number for pagination (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 5)
        in: query
        name: limit
        type: integer
      - description: Category ID for sorting products
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product list retrieved successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "502":
          description: Bad gateway
          schema:
            type: string
      summary: Sort products by category
      tags:
      - User Sort
  /user/profile:
    patch:
      description: Edit user profile based on the provided user ID and input data
      parameters:
      - description: User information to be edited
        in: body
        name: userinput
        required: true
        schema:
          $ref: '#/definitions/models.EditUser'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: user edited successfully, updateduser: entity.UserDetails'
          schema:
            type: string
        "400":
          description: 'error: Bad Request'
          schema:
            type: string
        "500":
          description: 'error: Failed to fetch updated user details'
          schema:
            type: string
      summary: Edit the profile for the authenticated user
      tags:
      - User
  /user/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user using OTP verification.
      operationId: signup-with-otp
      parameters:
      - description: User details for signup with OTP
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Signup'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully to the provided phone number
          schema:
            type: string
        "400":
          description: 'Bad request: Invalid request'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Something went wrong'
          schema:
            type: string
      summary: Sign up a user with OTP
      tags:
      - User
  /user/signup/otpvalidation:
    post:
      consumes:
      - multipart/form-data
      description: Validates the provided OTP for user signup.
      operationId: signup-otp-validation
      parameters:
      - description: Key associated with the OTP validation
        in: formData
        name: key
        required: true
        type: string
      - description: OTP to be validated
        in: formData
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User signup successful
          schema:
            type: string
        "401":
          description: 'Unauthorized: Invalid key or OTP'
          schema:
            type: string
      summary: Validate OTP for user signup
      tags:
      - User
  /user/wishlist:
    get:
      description: Retrieves and returns the products in the user's wishlist.
      operationId: viewWishlist
      produces:
      - application/json
      responses:
        "200":
          description: wishlist retrieved successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: error message'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: failed to retrieve wishlist'
          schema:
            type: string
      summary: View user's wishlist
      tags:
      - User Products
    post:
      consumes:
      - multipart/form-data
      description: Adds the specified product to the user's wishlist.
      operationId: addToWishList
      parameters:
      - description: Product ID to add to wishlist
        in: formData
        name: productid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: product added to wishlist
          schema:
            type: string
        "400":
          description: 'Bad Request: error message'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: failed to retrieve wishlist items'
          schema:
            type: string
      summary: Add a product to the wishlist
      tags:
      - User Products
  /user/wishlist/{id}:
    delete:
      consumes:
      - multipart/form-data
      description: Removes the specified product from the user's wishlist.
      operationId: removeFromWishlist
      parameters:
      - description: Product ID to remove from wishlist
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'message": "successfully removed from wishlist'
          schema:
            type: string
        "400":
          description: 'error": "Bad Request: error message'
          schema:
            type: string
        "500":
          description: 'error": "Internal Server Error: failed to remove from wishlist'
          schema:
            type: string
      summary: Remove a product from the wishlist
      tags:
      - User Products
securityDefinitions:
  JWT:
    in: cookie
    name: Authorise
    type: apiKey
swagger: "2.0"
