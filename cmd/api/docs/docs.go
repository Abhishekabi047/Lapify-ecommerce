// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/categories": {
            "post": {
                "description": "Create a new category by providing the category details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new category",
                "operationId": "create-category",
                "parameters": [
                    {
                        "description": "Category details",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success\": \"Category added successfully\" entity.Category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error\": \"Invalid input\" entity.ErrorResponse",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/categories/{id}": {
            "put": {
                "description": "Edit a category based on the provided JSON data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Edit a category",
                "operationId": "editCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category object to be edited",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success\": \"product edited successfully\", \"edited category\": entity.Category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error\": \"editing category failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing category based on the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a category",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success\": \"Category deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error\": \"Failed to delete category",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/category/offer": {
            "post": {
                "description": "Add an offer to a category based on the provided category ID and offer",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Add an offer to a category",
                "operationId": "addCategoryOffer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "form",
                        "name": "categoryid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "form",
                        "name": "offer",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "offer added: Category offer added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Failed to add category offer",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/coupons": {
            "get": {
                "description": "Get a list of all available coupons",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all available coupons",
                "operationId": "allCoupons",
                "responses": {
                    "200": {
                        "description": "List of available coupons\" entity.coupon",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve available coupons",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new coupon with the provided JSON data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Add a new coupon",
                "operationId": "addCoupon",
                "parameters": [
                    {
                        "description": "JSON-encoded Coupon object to be added",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon added successfully\" \"coupon\": entity.coupon",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to add coupon",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing coupon based on the provided code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a coupon",
                "operationId": "deleteCoupon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon code to be deleted",
                        "name": "code",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to delete coupon",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/home": {
            "get": {
                "description": "Get information about available options and the admin dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get home information",
                "operationId": "home",
                "responses": {
                    "200": {
                        "description": "Options: SalesReport - User Management - Product Management - Order Management. Dashboard information is also included.\" \"Dashboard\": entity.AdminDashboard",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve dashboard information",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/login": {
            "post": {
                "description": "Authenticate admin using email and password and generate an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Admin Login with Password",
                "operationId": "admin-login",
                "parameters": [
                    {
                        "description": "Admin Data",
                        "name": "admin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.AdminLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\": \"Admin logged in successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error\": \"Empty request body",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/order/cancel/{orderid}": {
            "patch": {
                "description": "Cancels an order based on the provided order ID (for admin use).",
                "produces": [
                    "application/json"
                ],
                "summary": "Cancel order (Admin)",
                "operationId": "admin-cancel-order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID to be canceled",
                        "name": "orderid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/order/details": {
            "get": {
                "description": "Retrieves the order details for admin based on pagination parameters.",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve order details for admin",
                "operationId": "get-admin-order-details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default is 5)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/order/update/{orderid}": {
            "patch": {
                "description": "Updates the status of an order based on the provided order ID and status (for admin use).",
                "produces": [
                    "application/json"
                ],
                "summary": "Update order status (Admin)",
                "operationId": "admin-update-order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID to be updated",
                        "name": "orderid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New status for the order",
                        "name": "status",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order updated successfully. Updated order status: {updated order status}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/product/offer": {
            "post": {
                "description": "Add an offer to a product based on the provided product ID and offer",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Add an offer to a product",
                "operationId": "addProductOffer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID to add the offer to",
                        "name": "productid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Offer to be added to the product",
                        "name": "offer",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product offer added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to add product offer",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "description": "Retrieve a list of products for the admin dashboard.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a list of products for admin",
                "operationId": "get-admin-products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductWithQuantityResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new product with details, including image upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new product",
                "operationId": "createProduct",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Product Price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Size",
                        "name": "size",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Specification",
                        "name": "specification",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Product Image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Image URL",
                        "name": "imageURL",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Product Quantity",
                        "name": "quantity",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product added successfully\" \"products\":entity.products",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to get product by ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/products/{id}": {
            "put": {
                "description": "Edit an existing product based on the provided JSON data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Edit a product",
                "operationId": "editProduct",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON-encoded Product object to be edited",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product edit success\" \"product\":entity.product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Product edit failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing product based on the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a product",
                "operationId": "deleteProduct",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/salesreport/date/{start}/{end}": {
            "get": {
                "description": "Generates a sales report based on the provided start and end dates.",
                "produces": [
                    "application/json"
                ],
                "summary": "Generate sales report by date range",
                "operationId": "sales-report-by-date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date for the report (format: 2-1-2006)",
                        "name": "start",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date for the report (format: 2-1-2006)",
                        "name": "end",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales report generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/salesreport/payment/{start}/{end}/{paymentmethod}": {
            "get": {
                "description": "Generates a sales report based on the provided start and end dates and payment method.",
                "produces": [
                    "application/json"
                ],
                "summary": "Generate sales report by payment method and date range",
                "operationId": "sales-report-by-payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date for the report (format: 2-1-2006)",
                        "name": "start",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date for the report (format: 2-1-2006)",
                        "name": "end",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Payment method for the report",
                        "name": "paymentmethod",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales report generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/salesreport/period/{period}": {
            "get": {
                "description": "Generates a sales report based on the provided period.",
                "produces": [
                    "application/json"
                ],
                "summary": "Generate sales report by period",
                "operationId": "sales-report-by-period",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Period for the report (e.g., 'monthly', 'quarterly', 'yearly')",
                        "name": "period",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales report generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/search/users": {
            "get": {
                "description": "Retrieve a list of users based on search criteria, paginated with optional limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search users based on criteria",
                "operationId": "searchUsers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number for pagination (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit the number of users per page (default: 5)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search criteria to filter users",
                        "name": "search",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "userlist: []entity.User",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Failed to retrieve userlist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/stockless/products": {
            "get": {
                "description": "Retrieve a list of products with zero stock",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get a list of stockless products",
                "operationId": "stocklessProducts",
                "responses": {
                    "200": {
                        "description": "List of stockless products: []entity.Product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Failed to retrieve stockless products",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "description": "Get a paginated list of users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List Users",
                "operationId": "list-users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of users per page (default is 5)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.ListUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/toggle-permission/{id}": {
            "put": {
                "description": "Toggle the permission of a user by providing the user's ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Toggle User Permission",
                "operationId": "toggle-user-permission",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success: User permission toggled successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Deletes the authentication token cookie to log the user out",
                "produces": [
                    "application/json"
                ],
                "summary": "Logs out the user",
                "responses": {
                    "200": {
                        "description": "user logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "cookie delete failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order/payment/verify": {
            "post": {
                "description": "Verifies the payment for Razorpay based on the provided signature, Razorpay ID, and payment ID.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Verify payment for Razorpay",
                "operationId": "verify-payment-razorpay",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Signature for payment verification",
                        "name": "sign",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Razorpay ID",
                        "name": "razorid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "paymentid",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment successful. Invoice details: {invoice}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/address": {
            "post": {
                "description": "Adds a new address associated with the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Adds a new address for the user",
                "parameters": [
                    {
                        "description": "Address information to be added",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "address added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/address/{type}": {
            "delete": {
                "description": "Deletes a specific type of address for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete user address",
                "operationId": "delete-user-address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of address to be deleted (e.g., 'home', 'work')",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success\": \"address Deleted successfully\" \"Successful response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error\": \"Error message\" \"Error response",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Edit the user's address of a specific type (e.g., home, work)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Edit the user's address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address type (e.g., home, work)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated address information",
                        "name": "useraddress",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success: address edited successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cart": {
            "get": {
                "description": "Retrieve the user's cart based on the provided user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get the user's cart",
                "operationId": "getCart",
                "responses": {
                    "200": {
                        "description": "usercart: entity.Cart",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Failed to retrieve user's cart",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a product to the user's cart based on the provided product ID and quantity",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Add a product to the user's cart",
                "operationId": "addToCart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID to add to the cart",
                        "name": "productid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Quantity of the product to add to the cart",
                        "name": "quantity",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Product added to cart successfully, addedproduct: []entity.CartItem",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Failed to add product to cart",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error: Failed to retrieve cart items",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cart/coupon": {
            "post": {
                "description": "Applies a coupon to the authenticated user's cart based on the provided coupon code.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Apply coupon to user's cart",
                "operationId": "apply-coupon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon code to be applied",
                        "name": "code",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Total offer prize and Coupon applied successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cart/{id}": {
            "delete": {
                "description": "Remove a product from the user's cart based on the provided cart item ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Remove a product from the user's cart",
                "operationId": "removeFromCart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cart item ID to remove from the cart",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Product removed from cart",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Failed to remove product from cart",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cartlist": {
            "get": {
                "description": "Retrieve the items in the user's cart based on the provided user ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get the items in the user's cart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "cartlist: []entity.CartItem",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/coupons": {
            "get": {
                "description": "Retrieves a list of available coupons.",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve available coupons",
                "operationId": "get-available-coupons",
                "responses": {
                    "200": {
                        "description": "List of available coupons",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/details": {
            "get": {
                "description": "Retrieve user details and associated address based on the provided user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Retrieve details for the authenticated user",
                "responses": {
                    "200": {
                        "description": "userdetails: entity.UserDetails, address: entity.UserAddress",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate a user using phone and password, and generate an authentication token",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Log in a user using phone and password",
                "operationId": "loginWithPassword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Phone number of the user",
                        "name": "phone",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: User logged in successfully and cookie stored",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Invalid phone number or password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/order/cancel/{orderid}": {
            "patch": {
                "description": "Cancels an order based on the provided order ID.",
                "produces": [
                    "application/json"
                ],
                "summary": "Cancel an order",
                "operationId": "cancel-order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID to be canceled",
                        "name": "orderid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order canceled successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/order/history": {
            "get": {
                "description": "Retrieves the order history for the authenticated user based on pagination parameters.",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve order history for the authenticated user",
                "operationId": "get-order-history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default is 5)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order history retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/order/invoice": {
            "get": {
                "description": "Generates and downloads the invoice for a specific order.",
                "produces": [
                    "application/json"
                ],
                "summary": "Print invoice for an order",
                "operationId": "print-invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID for which the invoice should be generated",
                        "name": "orderid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice generated and downloaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/order/place": {
            "post": {
                "description": "Places an order for the authenticated user based on the selected payment method.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Place an order",
                "operationId": "place-order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID for the order",
                        "name": "addressid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Payment method ('cod', 'razorpay', 'wallet')",
                        "name": "payment",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice details\" \"Successful response for Wallet payment",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/products": {
            "get": {
                "description": "Retrieve a list of products with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get a list of products",
                "operationId": "getProducts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number for pagination (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit the number of products per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "userId: \u003cuserID\u003e, products: []entity.Product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/products/details/{productid}": {
            "get": {
                "description": "Retrieve details of a product based on the provided product ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get details of a specific product",
                "operationId": "getProductDetails",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID to get details for",
                        "name": "productid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "products: entity.Product, product details: entity.ProductDetails",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/products/filter": {
            "get": {
                "description": "Retrieves a list of products based on the provided filter criteria.",
                "produces": [
                    "application/json"
                ],
                "summary": "Sort products by filter",
                "operationId": "sort-products-by-filter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Minimum prize for product filtering",
                        "name": "minprize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum prize for product filtering",
                        "name": "maxprize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Category ID for product filtering",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Product size for filtering",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product list retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/products/search": {
            "get": {
                "description": "Searches for products based on the provided search query.",
                "produces": [
                    "application/json"
                ],
                "summary": "Search products",
                "operationId": "search-products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default is 5)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search query string",
                        "name": "search",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error\": \"Error message\" \"Error response",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/products/sort": {
            "get": {
                "description": "Retrieves a list of products sorted by category based on the provided category ID.",
                "produces": [
                    "application/json"
                ],
                "summary": "Sort products by category",
                "operationId": "sort-products-by-category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default is 5)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Category ID for sorting products",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product list retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Bad gateway",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "patch": {
                "description": "Edit user profile based on the provided user ID and input data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Edit the profile for the authenticated user",
                "parameters": [
                    {
                        "description": "User information to be edited",
                        "name": "userinput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EditUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: user edited successfully, updateduser: entity.UserDetails",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error: Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error: Failed to fetch updated user details",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.AdminLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entity.Category": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "entity.ListUsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.User"
                    }
                }
            }
        },
        "entity.User": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "phone": {
                    "type": "string"
                },
                "referalcode": {
                    "type": "string"
                },
                "wallet": {
                    "type": "integer"
                }
            }
        },
        "entity.UserAddress": {
            "type": "object",
            "required": [
                "address",
                "country",
                "pin",
                "state",
                "type"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "pin": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.EditUser": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.ProductWithQuantityResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "offerprice": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorise",
            "in": "cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "lapify eCommerce API",
	Description:      "API for ecommerce website",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
